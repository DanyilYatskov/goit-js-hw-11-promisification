{"version":3,"sources":["webpack:///./js/start.js","webpack:///./js/taskThree.js","webpack:///./js/taskTwo.js","webpack:///./js/taskOne.js"],"names":["btnThree","document","querySelector","btnOne","btnTwo","addEventListener","console","clear","log","makeTransaction","transaction","min","max","delay","Math","floor","random","Promise","resolve","reject","setTimeout","canProcess","id","logSuccess","t","amount","logError","warn","then","catch","users","name","active","toggleUserState","allUsers","userName","usersCheck","Array","isArray","nameCheck","find","user","updatedUsers","map","logger","table","errorHandler","e","ms","Number","isInteger","time"],"mappings":"mNAIA,IAAMA,EAAWC,SAASC,cAAc,iBAClCC,EAASF,SAASC,cAAc,eAChCE,EAASH,SAASC,cAAc,eAEtCF,EAASK,iBAAiB,SCLX,WACbC,QAAQC,QACRD,QAAQE,IAAI,eACZ,IAIMC,EAAkB,SAAAC,GACtB,IALiCC,EAAKC,EAKhCC,GAL2BF,EAKO,IALFC,EAKO,IAJtCE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IAKpD,OAAO,IAAIM,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACT,IAAMC,EAAaP,KAAKE,SAAW,GAC7BM,EAAKZ,EAAYY,GACnBD,EACFH,EAAQ,CAAER,cAAaG,UAEvBM,EAAOG,KAERT,OAIDU,EAAa,SAAAC,GACjBlB,QAAQE,IAAR,eACiBgB,EAAEd,YAAYY,GAD/B,mBACoDE,EAAEd,YAAYe,OADlE,iBACyFD,EAAEX,MAD3F,OAKIa,EAAW,SAAAJ,GACfhB,QAAQqB,KAAR,gCAA6CL,EAA7C,8BAcFb,EAAgB,CAAEa,GAAI,GAAIG,OAAQ,MAAOG,KAAKL,GAAYM,MAAMH,GAEhEjB,EAAgB,CAAEa,GAAI,GAAIG,OAAQ,MAAOG,KAAKL,GAAYM,MAAMH,GAEhEjB,EAAgB,CAAEa,GAAI,GAAIG,OAAQ,KAAMG,KAAKL,GAAYM,MAAMH,GAE/DjB,EAAgB,CAAEa,GAAI,GAAIG,OAAQ,MAAOG,KAAKL,GAAYM,MAAMH,MD3ClEtB,EAAOC,iBAAiB,SEPT,WACbC,QAAQC,QACRD,QAAQE,IAAI,aACZ,IAAMsB,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIlB,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACT,IAAMgB,EAAaC,MAAMC,QAAQJ,GAC3BK,IAAYT,EAAMU,MAAK,SAAAC,GAAI,OAAIA,EAAKV,OAASI,KAInD,GAAIC,GAAcG,EAAW,CAC3B,IAAMG,EAAeR,EAASS,KAAI,SAAAF,GAAI,OACpCA,EAAKV,OAASI,EAAd,iBAA8BM,EAA9B,CAAoCT,QAASS,EAAKT,SAAWS,KAE/DvB,EAAQwB,OACH,CAELvB,EADU,yCAGX,SAIDyB,EAAS,SAAAF,GAAY,OAAIpC,QAAQuC,MAAMH,IACvCI,EAAe,SAAAC,GAAC,OAAIzC,QAAQqB,KAAKoB,IAEvCd,EAAgBH,EAAO,SAASF,KAAKgB,GAAQf,MAAMiB,GACnDb,EAAgBH,EAAO,OAAOF,KAAKgB,GAAQf,MAAMiB,MF3BnD3C,EAAOE,iBAAiB,SGRT,WACbC,QAAQC,QACRD,QAAQE,IAAI,aACZ,IAAMK,EAAQ,SAAAmC,GACZ,OAAO,IAAI/B,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACT,GAAI4B,GAAMC,OAAOC,UAAUF,GACzB9B,EAAQ8B,OACH,CAEL7B,EADc,kBAGf6B,OAIDJ,EAAS,SAAAO,GAAI,OAAI7C,QAAQE,IAAR,kBAA8B2C,EAA9B,OAGvBtC,EAAM,KAAMe,KAAKgB,GACjB/B,EAAM,KAAMe,KAAKgB,GACjB/B,EAAM,MAAMe,KAAKgB,Q","file":"main.32db8113f32c1801920c.js","sourcesContent":["import taskThree from './taskThree';\r\nimport taskTwo from './taskTwo';\r\nimport taskOne from './taskOne';\r\n\r\nconst btnThree = document.querySelector('#taskThree-js');\r\nconst btnOne = document.querySelector('#taskOne-js');\r\nconst btnTwo = document.querySelector('#taskTwo-js');\r\n\r\nbtnThree.addEventListener('click', taskThree);\r\nbtnTwo.addEventListener('click', taskTwo);\r\nbtnOne.addEventListener('click', taskOne);\r\n","// Перепиши функцию makeTransaction() так, чтобы она не использовала callback - функции onSuccess и onError,\r\n//     а принимала всего один параметр transaction и возвращала промис.\r\n\r\nexport default function taskThree() {\r\n  console.clear();\r\n  console.log('Task Three:');\r\n  const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n  const makeTransaction = transaction => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n        const id = transaction.id;\r\n        if (canProcess) {\r\n          resolve({ transaction, delay });\r\n        } else {\r\n          reject(id);\r\n        }\r\n      }, delay);\r\n    });\r\n  };\r\n\r\n  const logSuccess = t => {\r\n    console.log(\r\n      `Transaction ${t.transaction.id} with amount of ${t.transaction.amount} processed in ${t.delay}ms`,\r\n    );\r\n  };\r\n\r\n  const logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };\r\n\r\n  /*\r\n   * Работает так\r\n   */\r\n  // makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n  // makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n  // makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n  // makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n  /*\r\n   * Должно работать так\r\n   */\r\n\r\n  makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\n  makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\n  makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\n  makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n}\r\n","// Перепиши функцию toggleUserState() так, чтобы она не использовала callback - функцию callback,\r\n//     а принимала всего два параметра allUsers и userName и возвращала промис.\r\nexport default function taskTwo() {\r\n  console.clear();\r\n  console.log('Task Two:');\r\n  const users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n  ];\r\n\r\n  const toggleUserState = (allUsers, userName) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        const usersCheck = Array.isArray(allUsers);\r\n        const nameCheck = users.find(user => user.name === userName)\r\n          ? true\r\n          : false;\r\n\r\n        if (usersCheck && nameCheck) {\r\n          const updatedUsers = allUsers.map(user =>\r\n            user.name === userName ? { ...user, active: !user.active } : user,\r\n          );\r\n          resolve(updatedUsers);\r\n        } else {\r\n          const e = 'Input error or user does not exist';\r\n          reject(e);\r\n        }\r\n      }, 1000);\r\n    });\r\n  };\r\n\r\n  const logger = updatedUsers => console.table(updatedUsers);\r\n  const errorHandler = e => console.warn(e);\r\n\r\n  toggleUserState(users, 'Mango').then(logger).catch(errorHandler);\r\n  toggleUserState(users, 'Lux').then(logger).catch(errorHandler);\r\n  //toggleUserState(users, 'asd').then(logger).catch(errorHandler);\r\n}\r\n","// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд.\r\n// Значением исполнившегося промиса должно быть то кол - во миллисекунд которое передали во время вызова функции delay.\r\nexport default function taskOne() {\r\n  console.clear();\r\n  console.log('Task One:');\r\n  const delay = ms => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (ms && Number.isInteger(ms)) {\r\n          resolve(ms);\r\n        } else {\r\n          const error = 'input error';\r\n          reject(error);\r\n        }\r\n      }, ms);\r\n    });\r\n  };\r\n\r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n  const handleError = error => console.warn(error);\r\n  // Вызовы функции для проверки\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms\r\n  // delay().then(logger).catch(handleError);\r\n  // delay('asd').then(logger).catch(handleError);\r\n  // delay(1.5).then(logger).catch(handleError);\r\n}\r\n"],"sourceRoot":""}